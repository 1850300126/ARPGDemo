//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/ThirdPersonDemo/PlayerInputAction/InputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionComponent: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionComponent()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionAsset"",
    ""maps"": [
        {
            ""name"": ""PlayerInputAction"",
            ""id"": ""eca64dba-0b66-47c8-9fe4-f516bf0ad528"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""14bd9aae-ad0a-41cd-b8a7-99fbe420ad01"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a8a9a80b-d9d0-441e-9de9-13837018a19e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""cd0c79dc-38ed-4901-b981-1b07683a1d09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""0f8308e7-2c8f-41f1-86ff-90b8d04dce1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""2883dab3-ec26-40cf-b2cc-95740565088a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HardAttack"",
                    ""type"": ""Button"",
                    ""id"": ""6acc501b-318f-4ffd-8161-a0442e576d71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""28e3ce28-577e-4954-bf96-8530b7561e2a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""557dd16f-022e-4797-8527-9f02331173ae"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b3143ba-6701-434d-9b45-233974af9f0f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7d9e524c-6c0d-4c4d-bca2-1a1846950f37"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ac44054b-1559-4c4c-9327-6dab5c4e1357"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d37861ea-c4d8-41aa-aa98-44f0eea3cbe9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""684b9653-9508-4258-a9c6-518d8384f2d0"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dee3e43-2931-4196-b46d-602bd40a179d"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""575b754b-df41-4f5f-a455-8c4c485264d0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cabbfbc-2ec4-4cd3-8da1-d03dee4b01f3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HardAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputAction
        m_PlayerInputAction = asset.FindActionMap("PlayerInputAction", throwIfNotFound: true);
        m_PlayerInputAction_Movement = m_PlayerInputAction.FindAction("Movement", throwIfNotFound: true);
        m_PlayerInputAction_Jump = m_PlayerInputAction.FindAction("Jump", throwIfNotFound: true);
        m_PlayerInputAction_Dodge = m_PlayerInputAction.FindAction("Dodge", throwIfNotFound: true);
        m_PlayerInputAction_Sprint = m_PlayerInputAction.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerInputAction_LightAttack = m_PlayerInputAction.FindAction("LightAttack", throwIfNotFound: true);
        m_PlayerInputAction_HardAttack = m_PlayerInputAction.FindAction("HardAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputAction
    private readonly InputActionMap m_PlayerInputAction;
    private List<IPlayerInputActionActions> m_PlayerInputActionActionsCallbackInterfaces = new List<IPlayerInputActionActions>();
    private readonly InputAction m_PlayerInputAction_Movement;
    private readonly InputAction m_PlayerInputAction_Jump;
    private readonly InputAction m_PlayerInputAction_Dodge;
    private readonly InputAction m_PlayerInputAction_Sprint;
    private readonly InputAction m_PlayerInputAction_LightAttack;
    private readonly InputAction m_PlayerInputAction_HardAttack;
    public struct PlayerInputActionActions
    {
        private @InputActionComponent m_Wrapper;
        public PlayerInputActionActions(@InputActionComponent wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerInputAction_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerInputAction_Jump;
        public InputAction @Dodge => m_Wrapper.m_PlayerInputAction_Dodge;
        public InputAction @Sprint => m_Wrapper.m_PlayerInputAction_Sprint;
        public InputAction @LightAttack => m_Wrapper.m_PlayerInputAction_LightAttack;
        public InputAction @HardAttack => m_Wrapper.m_PlayerInputAction_HardAttack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputActionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @LightAttack.started += instance.OnLightAttack;
            @LightAttack.performed += instance.OnLightAttack;
            @LightAttack.canceled += instance.OnLightAttack;
            @HardAttack.started += instance.OnHardAttack;
            @HardAttack.performed += instance.OnHardAttack;
            @HardAttack.canceled += instance.OnHardAttack;
        }

        private void UnregisterCallbacks(IPlayerInputActionActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @LightAttack.started -= instance.OnLightAttack;
            @LightAttack.performed -= instance.OnLightAttack;
            @LightAttack.canceled -= instance.OnLightAttack;
            @HardAttack.started -= instance.OnHardAttack;
            @HardAttack.performed -= instance.OnHardAttack;
            @HardAttack.canceled -= instance.OnHardAttack;
        }

        public void RemoveCallbacks(IPlayerInputActionActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputActionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputActionActions @PlayerInputAction => new PlayerInputActionActions(this);
    public interface IPlayerInputActionActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHardAttack(InputAction.CallbackContext context);
    }
}
